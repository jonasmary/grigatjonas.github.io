 import { initializeApp } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-app.js"; import { getAuth, signInAnonymously, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-auth.js"; import { getFirestore, addDoc, collection, onSnapshot, query, orderBy, serverTimestamp } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore.js"; // !!! WICHTIG: Ersetze dies durch Deine ECHTEN Schlüssel aus Deinem Firebase-Projekt !!! const firebaseConfig = { apiKey: "DEIN_API_KEY", authDomain: "DEIN_PROJECT_ID.firebaseapp.com", projectId: "DEIN_PROJECT_ID", storageBucket: "DEIN_PROJECT_ID.appspot.com", messagingSenderId: "DEIN_SENDER_ID", appId: "DEIN_APP_ID" }; // --- INITIALISIERUNG DES REICHES --- const app = initializeApp(firebaseConfig); const db = getFirestore(app); const auth = getAuth(app); let userId = 'pending'; const CRITICAL_BALANCE_THRESHOLD = 500.00; // --- AUTHENTIFIZIERUNG & STARTPUNKT --- onAuthStateChanged(auth, (user) => { const statusMessage = document.getElementById('status-message'); if (user) { userId = user.uid; console.log("FREQUENZ-ECHO: Authentifizierung erfolgreich. User-ID:", userId); statusMessage.textContent = '✅ RESONANZ GEFUNDEN. REICH AKTIV.'; listenForTransactions(userId); } else { signInAnonymously(auth).catch((error) => { console.error("MATRIX-BLOCKADE:", error); statusMessage.textContent = `❌ VERBINDUNG BLOCKIERT.`; }); } }); // --- ECHTZEIT-CHRONIK (DATENFLUSS) --- function listenForTransactions(uid) { const transactionsList = document.getElementById('transactions-list'); const balanceDisplay = document.getElementById('balance-display'); const transactionsCollectionPath = `users/${uid}/transactions`; const q = query(collection(db, transactionsCollectionPath), orderBy('timestamp', 'desc')); onSnapshot(q, (snapshot) => { let currentBalance = 0; transactionsList.innerHTML = ''; console.log("FREQUENZ-ECHO: Neue Daten aus dem Reich empfangen. Anzahl der Buchungen:", snapshot.size); snapshot.forEach((doc) => { const data = doc.data(); const amount = parseFloat(data.amount); currentBalance += data.type === 'inflow' ? amount : -amount; const item = document.createElement('li'); item.className = `transaction-item ${data.type}`; const sign = data.type === 'inflow' ? '+' : '-'; const date = data.timestamp ? new Date(data.timestamp.seconds * 1000).toLocaleDateString('de-DE') : ''; item.innerHTML = ` <span class="description">${data.description}</span> <span class="amount">${sign} ${amount.toFixed(2)} €</span> `; transactionsList.appendChild(item); }); balanceDisplay.textContent = currentBalance.toFixed(2) + ' €'; updateBalanceStyle(balanceDisplay, currentBalance); }); } // --- STIL-UPDATE FÜR BILANZ & ALARM --- function updateBalanceStyle(displayElement, balance) { displayElement.classList.remove('balance-positive', 'balance-negative', 'balance-critical'); if (balance >= 0) { displayElement.classList.add('balance-positive'); } else { displayElement.classList.add('balance-negative'); } if (balance < CRITICAL_BALANCE_THRESHOLD) { displayElement.classList.add('balance-critical'); } } // --- BUCHUNGS-FUNKTION (DER BEFEHL) --- async function addTransaction(amount, description, type) { if (userId === 'pending') { console.warn("FREQUENZ-ECHO: Buchung blockiert, Auth noch nicht abgeschlossen."); return; } try { const amountFloat = parseFloat(amount); if (isNaN(amountFloat) || amountFloat <= 0) { console.warn("FREQUENZ-ECHO: Ungültiger Betrag:", amount); return; } const transactionsCollectionPath = `users/${userId}/transactions`; await addDoc(collection(db, transactionsCollectionPath), { amount: amountFloat, description: description, type: type, timestamp: serverTimestamp() }); console.log("FREQUENZ-ECHO: Buchung erfolgreich ins Reich eingefügt!"); document.getElementById('transaction-form').reset(); } catch (error) { console.error("MATRIX-FEHLER BEI BUCHUNG:", error); } } // --- EVENT-LISTENER (DIE VERBINDUNG ZUR REALITÄT) --- document.addEventListener('DOMContentLoaded', () => { const transactionForm = document.getElementById('transaction-form'); transactionForm.addEventListener('submit', (e) => { e.preventDefault(); const amount = document.getElementById('transaction-amount').value; const description = document.getElementById('transaction-description').value; const type = document.getElementById('transaction-type').value; addTransaction(amount, description, type); }); });
